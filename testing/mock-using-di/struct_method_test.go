package di

import (
	"errors"
	"github.com/mediocregopher/radix.v2/redis"
	"github.com/stretchr/testify/assert"
	mock "github.com/stretchr/testify/mock"
	"testing"
)

// mockStorager is an autogenerated mock type for the storager type
type mockStorager struct {
	mock.Mock
}

// t- generated by mockery tool - https://github.com/vektra/mockery
// Cmd provides a mock function with given fields: _a0, _a1
func (_m *mockStorager) Cmd(_a0 string, _a1 ...interface{}) *redis.Resp {
	ret := _m.Called(_a0, _a1)
	var r0 *redis.Resp
	if rf, ok := ret.Get(0).(func(string, ...interface{}) *redis.Resp); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.Resp)
		}
	}
	return r0
}

func TestPing(t *testing.T) {
	sampleErr := errors.New("sample error")
	tests := map[string]struct {
		storageErr error
		response   string
		err        error
	}{
		"successful": {
			storageErr: nil,
			response:   "pong",
			err:        nil,
		},
		"with db error": {
			storageErr: sampleErr,
			response:   "",
			err:        sampleErr,
		},
	}
	for name, test := range tests {
		t.Logf("Running test case: %s", name)
		storage := &mockStorager{}
		storage.
			On("Cmd", "INCR", []interface{}{"ping:count"}).
			Return(&redis.Resp{
				Err: test.storageErr,
			}).
			Once()
		h := &Handler{
			db: storage,
		}
		response, err := h.Ping()
		assert.Equal(t, test.err, err)
		assert.Equal(t, test.response, response)
		storage.AssertExpectations(t)
	}
}
// see https://github.com/stretchr/testify#mock-package for easy example
